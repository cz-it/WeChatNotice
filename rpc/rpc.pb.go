// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NoticeReq struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Nick                 string   `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoticeReq) Reset()         { *m = NoticeReq{} }
func (m *NoticeReq) String() string { return proto.CompactTextString(m) }
func (*NoticeReq) ProtoMessage()    {}
func (*NoticeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *NoticeReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoticeReq.Unmarshal(m, b)
}
func (m *NoticeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoticeReq.Marshal(b, m, deterministic)
}
func (m *NoticeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoticeReq.Merge(m, src)
}
func (m *NoticeReq) XXX_Size() int {
	return xxx_messageInfo_NoticeReq.Size(m)
}
func (m *NoticeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NoticeReq.DiscardUnknown(m)
}

var xxx_messageInfo_NoticeReq proto.InternalMessageInfo

func (m *NoticeReq) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *NoticeReq) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

type NoticeRsp struct {
	Errno                int32    `protobuf:"varint,1,opt,name=errno,proto3" json:"errno,omitempty"`
	Errmsg               int32    `protobuf:"varint,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoticeRsp) Reset()         { *m = NoticeRsp{} }
func (m *NoticeRsp) String() string { return proto.CompactTextString(m) }
func (*NoticeRsp) ProtoMessage()    {}
func (*NoticeRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

func (m *NoticeRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoticeRsp.Unmarshal(m, b)
}
func (m *NoticeRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoticeRsp.Marshal(b, m, deterministic)
}
func (m *NoticeRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoticeRsp.Merge(m, src)
}
func (m *NoticeRsp) XXX_Size() int {
	return xxx_messageInfo_NoticeRsp.Size(m)
}
func (m *NoticeRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_NoticeRsp.DiscardUnknown(m)
}

var xxx_messageInfo_NoticeRsp proto.InternalMessageInfo

func (m *NoticeRsp) GetErrno() int32 {
	if m != nil {
		return m.Errno
	}
	return 0
}

func (m *NoticeRsp) GetErrmsg() int32 {
	if m != nil {
		return m.Errmsg
	}
	return 0
}

func init() {
	proto.RegisterType((*NoticeReq)(nil), "NoticeReq")
	proto.RegisterType((*NoticeRsp)(nil), "NoticeRsp")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x32, 0xe4, 0xe2, 0xf4, 0xcb, 0x2f, 0xc9, 0x4c, 0x4e, 0x0d,
	0x4a, 0x2d, 0x14, 0x12, 0xe0, 0x62, 0xce, 0x2d, 0x4e, 0x97, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c,
	0x02, 0x31, 0x85, 0x84, 0xb8, 0x58, 0xf2, 0x32, 0x93, 0xb3, 0x25, 0x98, 0xc0, 0x42, 0x60, 0xb6,
	0x92, 0x25, 0x5c, 0x4b, 0x71, 0x81, 0x90, 0x08, 0x17, 0x6b, 0x6a, 0x51, 0x51, 0x5e, 0x3e, 0x58,
	0x13, 0x6b, 0x10, 0x84, 0x23, 0x24, 0xc6, 0xc5, 0x96, 0x5a, 0x54, 0x04, 0x32, 0x8b, 0x09, 0x2c,
	0x0c, 0xe5, 0x19, 0x19, 0x71, 0xf1, 0x84, 0xa7, 0x3a, 0x67, 0x24, 0x96, 0x40, 0x0c, 0x10, 0x52,
	0xe2, 0x62, 0x83, 0xb2, 0xb8, 0xf4, 0xe0, 0xce, 0x90, 0x82, 0xb3, 0x8b, 0x0b, 0x94, 0x18, 0x92,
	0xd8, 0xc0, 0x0e, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x02, 0xc6, 0x93, 0x4a, 0xb5, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WeChatNoticeClient is the client API for WeChatNotice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WeChatNoticeClient interface {
	// Send a Notice
	Notice(ctx context.Context, in *NoticeReq, opts ...grpc.CallOption) (*NoticeRsp, error)
}

type weChatNoticeClient struct {
	cc *grpc.ClientConn
}

func NewWeChatNoticeClient(cc *grpc.ClientConn) WeChatNoticeClient {
	return &weChatNoticeClient{cc}
}

func (c *weChatNoticeClient) Notice(ctx context.Context, in *NoticeReq, opts ...grpc.CallOption) (*NoticeRsp, error) {
	out := new(NoticeRsp)
	err := c.cc.Invoke(ctx, "/WeChatNotice/Notice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeChatNoticeServer is the server API for WeChatNotice service.
type WeChatNoticeServer interface {
	// Send a Notice
	Notice(context.Context, *NoticeReq) (*NoticeRsp, error)
}

func RegisterWeChatNoticeServer(s *grpc.Server, srv WeChatNoticeServer) {
	s.RegisterService(&_WeChatNotice_serviceDesc, srv)
}

func _WeChatNotice_Notice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatNoticeServer).Notice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeChatNotice/Notice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatNoticeServer).Notice(ctx, req.(*NoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _WeChatNotice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WeChatNotice",
	HandlerType: (*WeChatNoticeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notice",
			Handler:    _WeChatNotice_Notice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
